#include "GAMER.h"

#ifdef SUPPORT_DENGO


// global variables for accessing h_Che_Array[]
// --> declared in Init_MemAllocate_Dengo.cpp
extern int Che_NField;
extern int CheIdx_Dens;
extern int CheIdx_sEint;
extern int CheIdx_Ent;

{%- for s in network.required_species | sort %}
{%- if s != network.energy_term %}
extern int CheIdx_{{s.name}};
{%- endif %}
{%- endfor %}
extern int CheIdx_CoolingTime;



//-------------------------------------------------------------------------------------------------------
// Function    :  Dengo_Close
// Description :  Copy the specific internal energy updated by the Dengo solver back to the
//                patch pointers
//
// Note        :  1. Use SaveSg to determine where to store the data
//                   --> Currently it's set to the same Sg as the fluid data when calling
//                       Dengo_AdvanceDt() in EvolveLevel()
//                2. Che_NField and the corresponding array indices in h_Che_Array[] (e.g., CheIdx_Dens)
//                   are declared and set by Init_MemAllocate_Dengo()
//
// Parameter   :  lv          : Target refinement level
//                SaveSg      : Sandglass to store the updated data
//                h_Che_Array : Host array storing the updated data
//                NPG         : Number of patch groups to store the updated data
//                PID0_List   : List recording the patch indices with LocalID==0 to be udpated
//-------------------------------------------------------------------------------------------------------
void Dengo_Close( const int lv, const int SaveSg, const real h_Che_Array[], const int NPG, const int *PID0_List )
{

   const int  Size1pg      = CUBE(PS2);
   const int  Size1v       = NPG*Size1pg;
   const real MassRatio_ep = Const_me / Const_mp;

   const real *Ptr_Dens0  = h_Che_Array + CheIdx_Dens *Size1v;
   const real *Ptr_sEint0 = h_Che_Array + CheIdx_sEint*Size1v;
   const real *Ptr_Ent0   = h_Che_Array + CheIdx_Ent  *Size1v;

   {%- for s in network.required_species | sort %}
   {%- if s != network.energy_term %}
   const real *Ptr_{{s.name}}0 = h_Che_Array + CheIdx_{{s.name}} * Size1v;
   {%- endif %}
   {%- endfor %};
   const real *Ptr_CoolingTime0 = h_Che_Array + CheIdx_CoolingTime* Size1v;

#  pragma omp parallel
   {

// thread-private variables
   int  idx_p, idx_pg, PID, PID0, offset;    // idx_p/idx_pg: array indices within a patch/patch group
   real Dens, Eint;
#  ifdef DUAL_ENERGY
   real Pres;
#  endif
   real (*fluid)[PS1][PS1][PS1]=NULL;

   const real *Ptr_Dens=NULL, *Ptr_sEint=NULL, *Ptr_Ent=NULL; 
   {%- for s in network.required_species %}
   {%- if s != network.energy_term %}
   const real *Ptr_{{s.name}}=NULL;
   {%- endif %}
   {%- endfor %}
   const real *Ptr_CoolingTime =NULL;

#  pragma omp for schedule( static )
   for (int TID=0; TID<NPG; TID++)
   {
      PID0      = PID0_List[TID];
      idx_pg    = 0;
      offset    = TID*Size1pg;

      Ptr_Dens  = Ptr_Dens0  + offset;
      Ptr_sEint = Ptr_sEint0 + offset;
      Ptr_Ent   = Ptr_Ent0   + offset;

      {%- for s in network.required_species %}
      {%- if s != network.energy_term %}
      Ptr_{{s.name}} = Ptr_{{s.name}}0 + offset;
      {%- endif %}
      {%- endfor %}
      Ptr_CoolingTime = Ptr_CoolingTime0 + offset;

      for (int LocalID=0; LocalID<8; LocalID++)
      {
         PID   = PID0 + LocalID;
         idx_p = 0;
         fluid = amr->patch[SaveSg][lv][PID]->fluid;

         for (int k=0; k<PS1; k++)
         for (int j=0; j<PS1; j++)
         for (int i=0; i<PS1; i++)
         {
//          apply internal energy floor
            Dens = Ptr_Dens [idx_pg];
            Eint = Ptr_sEint[idx_pg]*Dens;
            Eint = Hydro_CheckMinEint( Eint, MIN_EINT );

//          update the total energy density
            *( fluid[ENGY     ][0][0] + idx_p ) = Eint + Ptr_Ent[idx_pg];

//          update the dual-energy variable to be consistent with the updated pressure
#           ifdef DUAL_ENERGY
#           if   ( DUAL_ENERGY == DE_ENPY )
//          DE_ENPY only works with EOS_GAMMA, which does not involve passive scalars
            Pres = EoS_DensEint2Pres_CPUPtr( Dens, Eint, NULL, EoS_AuxArray );
            *( fluid[ENPY     ][0][0] + idx_p ) = Hydro_DensPres2Entropy( Dens, Pres, EoS_AuxArray[1] );

#           elif ( DUAL_ENERGY == DE_EINT )
#           error : DE_EINT is NOT supported yet !!
#           endif
#           endif // #ifdef DUAL_ENERGY

//          update all chemical species
            {%- for s in network.required_species %}
            {%- if s != network.energy_term %}
            {%- if s.name == "de" %}
            *( fluid[Idx_{{s.name}}][0][0] + idx_p ) = Ptr_{{s.name}}[idx_pg]* MassRatio_ep;
            {%- else %}
            *( fluid[Idx_{{s.name}}][0][0] + idx_p ) = Ptr_{{s.name}}[idx_pg];
            {%- endif %}
            {%- endif %}
            {%- endfor %}
            *( fluid[Idx_CoolingTime][0][0] + idx_p ) = Ptr_CoolingTime[idx_pg];

            idx_p  ++;
            idx_pg ++;
         } // i,j,k
      } // for (int LocalID=0; LocalID<8; LocalID++)
   } // for (int TID=0; TID<NPG; TID++)

   } // end of OpenMP parallel region

} // FUNCTION : Dengo_Close



#endif // #ifdef SUPPORT_DENGO
